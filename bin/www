#!/usr/bin/env node

//  --------- 启动服务 --------- //

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('curriculum-vitae-server');

const http = require('http');

/**
 * Get port from environment and store in Express.
 */
const httpPort = normalizePort(process.env.PORT || '3000');

app.set('port', httpPort);
const httpServer = http.createServer(app);

// websocket Start
const WebSocket = require('ws');
const wss = new WebSocket.Server({server: httpServer});

function heartbeat() {
  this.isAlive = true;
}

wss.on('connection', function connection(ws, req) {
  ws.isAlive = true;
  ws.on('pong', heartbeat);
  console.warn(req.url);
  
  // deal home page
  if (req.url === '/v1/home') {
    const ip = req.connection.remoteAddress;
    ws.send('Welcome ', ip);
    console.warn(req);

    // Broadcast all
    wss.clients.forEach((client) => {
      if (client === ws && client.readyState === WebSocket.OPEN) {
        client.send(req.headers['user-agent']);
      }
    });
    
    ws.on('message', function incoming(message) {
      console.warn('received: %s', message);
    });

    setTimeout(() => {
      ws.send('test');
    }, 4000);
  }

});
 
setInterval(function ping() {
  wss.clients.forEach(function each(ws) {
    if (ws.isAlive === false) {
      return ws.terminate();
    }
 
    ws.isAlive = false;
    ws.ping('', false, true);
  });
}, 30000);
// websocket END

/**
 * Listen on provided port, on all network interfaces.
 * 启动服务
 */
httpServer.listen(httpPort);
httpServer.on('error', onError);
httpServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */
function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */
function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof httpPort === 'string' ?
    `Pipe ${httpPort}` :
    `Port ${httpPort}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */
function onListening () {
  const addr = httpServer.address();
  const bind = typeof addr === 'string' ?
    `pipe ${addr}` :
    `port ${addr.port}`;
  debug(`Server start success, Listening on ${bind}`);
}
