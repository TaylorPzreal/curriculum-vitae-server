#!/usr/bin/env node

/**
 * Module dependencies.
 */
const app = require('../app');
const debug = require('debug')('curriculum-vitae-server:server');
const fs = require('fs');
const path = require('path');

const http = require('http');
const https = require('https');

// 根据项目的路径导入生成的证书文件  
const privateKey = fs.readFileSync(path.join(__dirname, '../certificate/private.pem'), 'utf8');
const certificate = fs.readFileSync(path.join(__dirname, '../certificate/file.crt'), 'utf8');
const credentials = {
  key: privateKey,
  cert: certificate
};

/**
 * Get port from environment and store in Express.
 */

// const httpPort = normalizePort(process.env.PORT || '3000'); // 443
const httpsPort = normalizePort(process.env.PORT || '3000'); // 443

app.set('port', httpsPort);

/**
 * Create HTTP server.
 */

// const httpServer = http.createServer(app);
const httpsServer = https.createServer(credentials, app);

/**
 * Listen on provided port, on all network interfaces.
 * 启动服务
 */
httpsServer.listen(httpsPort);
httpsServer.on('error', onError);
httpsServer.on('listening', onListening);

/**
 * Normalize a port into a number, string, or false.
 */

function normalizePort (val) {
  const port = parseInt(val, 10);

  if (isNaN(port)) {
    // named pipe
    return val;
  }

  if (port >= 0) {
    // port number
    return port;
  }

  return false;
}

/**
 * Event listener for HTTP server "error" event.
 */

function onError (error) {
  if (error.syscall !== 'listen') {
    throw error;
  }

  const bind = typeof httpPort === 'string' ?
    `Pipe ${httpsPort}` :
    `Port ${httpsPort}`;

  // handle specific listen errors with friendly messages
  switch (error.code) {
  case 'EACCES':
    console.error(`${bind} requires elevated privileges`);
    process.exit(1);
    break;
  case 'EADDRINUSE':
    console.error(`${bind} is already in use`);
    process.exit(1);
    break;
  default:
    throw error;
  }
}

/**
 * Event listener for HTTP server "listening" event.
 */

function onListening () {
  const addr = httpsServer.address();
  const bind = typeof addr === 'string' ?
    `pipe ${addr}` :
    `port ${addr.port}`;
  debug(`Listening on ${bind}`);

  console.warn('服务启动成功: ', bind);
}
